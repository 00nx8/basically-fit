var __defProp = Object.defineProperty;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __publicField = (obj, key, value) => __defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);
import { E as reactive, n as watch, aw as toRaw } from "./index-DiEwj2lb.js";
class Row {
  /**
   * Can be assigned manually, or generated by `create` or `insert`.
   */
  id;
  /**
   * Retrieve the reactive list of all objects of the type of this subclass.
   * This should not be called on `Row` but on a subclass.
   * The returned value is cached, so the same object will always be returned.
   * @returns The reactive list of objects.
   */
  static all() {
    if (!this._all) {
      const map = /* @__PURE__ */ new Map();
      const all = JSON.parse(localStorage.getItem("tcdb-" + this.name) || "[]").map(
        (rowData) => Object.assign(Object.create(this.prototype), rowData)
      );
      for (const obj of all) {
        this._maxId = Math.max(this._maxId, obj.id);
        map.set(obj.id, obj);
      }
      this._map = reactive(map);
      this._all = reactive(all);
      const syncAll = () => {
        const values = Array.from(this._map.values());
        localStorage.setItem("tcdb-" + this.name, JSON.stringify(values));
        let index = 0;
        for (const rowData of values) {
          this._maxId = Math.max(this._maxId, rowData.id || 0);
          this._all[index++] = rowData;
        }
        if (index < this._all.length) {
          this._all.splice(index, this._all.length - index);
        }
      };
      syncAll();
      setTimeout(() => {
        watch(this._map, syncAll, { deep: true, immediate: true });
      }, 0);
    }
    return this._all;
  }
  /**
   * Reactively retrieve a row from the store by its id. This should
   * not be called on `Row` but on a subclass.
   * @param id The id for the row to retrieve.
   * @returns The row object. Or throws a `RangeError` if it does not exist.
   */
  static get(id) {
    this.all();
    const result = this._map.get(id);
    if (!result) return void 0;
    return result;
  }
  /**
   * Create a new row for a certain type, and optionally add it to the storage. This should
   * not be called on `Row` but on a subclass.
   * @param data An object containing any properties to set for the newly created row.
   * @param insert When `true` (the default), the newly created row is added to the storage.
   * @returns The newly created row, including default values. If `insert` is `true`,
   * it will also include a generated `id` and it will be a reactive object, as it is
   * included in `all`.
   */
  static create(data = {}, insert = true) {
    const obj = Object.assign(new this(), data);
    return insert ? obj.insert() : obj;
  }
  /**
   * Delete this row from the store.
   */
  delete() {
    if (!this.id) throw new Error("delete() called but id was not set");
    const Class = this.constructor;
    Class.all();
    Class._map.delete(this.id);
    console.log("deleted successfully");
  }
  /**
   * If the object has no `id` yet, assign one. Use this `id` to insert it into
   * the `all` object (causing persistence to localStorage).
   * If an `id` is provided, it may overwrite an existing row.
   * @param this The object to save.
   * @returns The reactive version of the object, as it is within `all`.
   */
  insert() {
    const Class = this.constructor;
    Class.all();
    if (!this.id) this.id = ++Class._maxId;
    Class._map.set(this.id, this);
    return Class._map.get(this.id);
  }
  /**
   * Useful to create a temporary working copy that is not included in the store.
   * If desired, the copy can later be persisted by calling `insert` on it.
   * @returns A (non-reactive) deep copy of the object.
   */
  clone() {
    return Object.assign(Object.create(this.constructor.prototype), toRaw(this));
  }
  toString() {
    return `${this.constructor.name}:${this.id}`;
  }
}
// These are populated for each type of Row the first time its
// `all()` is called, based on `rawTables` content.
__publicField(Row, "_map");
__publicField(Row, "_all");
__publicField(Row, "_maxId", 0);
class Exercise extends Row {
  description;
  name;
  voiceNote;
}
class WorkoutPlan extends Row {
  name;
  location = {
    lon: 0,
    lat: 0
  };
  includedWorkouts = [];
  cleanseWorkouts() {
    this.includedWorkouts = this.includedWorkouts.filter((workout) => {
      return workout.exerciseId !== void 0 && Exercise.get(workout.exerciseId) !== void 0;
    });
  }
}
class Workout extends Row {
  reps;
  sets;
  exerciseId;
  exercise = () => {
    return Exercise.create({ ...Exercise.get(this.exerciseId) }, false);
  };
}
export {
  Exercise as E,
  Workout as W,
  WorkoutPlan as a
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
