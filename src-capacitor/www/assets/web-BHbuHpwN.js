import { W as WebPlugin } from "./index-DiEwj2lb.js";
class GeolocationWeb extends WebPlugin {
  async getCurrentPosition(options) {
    return new Promise((resolve, reject) => {
      navigator.geolocation.getCurrentPosition((pos) => {
        resolve(pos);
      }, (err) => {
        reject(err);
      }, Object.assign({ enableHighAccuracy: false, timeout: 1e4, maximumAge: 0 }, options));
    });
  }
  async watchPosition(options, callback) {
    const id = navigator.geolocation.watchPosition((pos) => {
      callback(pos);
    }, (err) => {
      callback(null, err);
    }, Object.assign({ enableHighAccuracy: false, timeout: 1e4, maximumAge: 0, minimumUpdateInterval: 5e3 }, options));
    return `${id}`;
  }
  async clearWatch(options) {
    window.navigator.geolocation.clearWatch(parseInt(options.id, 10));
  }
  async checkPermissions() {
    if (typeof navigator === "undefined" || !navigator.permissions) {
      throw this.unavailable("Permissions API not available in this browser");
    }
    const permission = await window.navigator.permissions.query({
      name: "geolocation"
    });
    return { location: permission.state, coarseLocation: permission.state };
  }
  async requestPermissions() {
    throw this.unimplemented("Not implemented on web.");
  }
}
const Geolocation = new GeolocationWeb();
export {
  Geolocation,
  GeolocationWeb
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2ViLUJIYnVIcHdOLmpzIiwic291cmNlcyI6WyIuLi8uLi9ub2RlX21vZHVsZXMvQGNhcGFjaXRvci9nZW9sb2NhdGlvbi9kaXN0L2VzbS93ZWIuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgV2ViUGx1Z2luIH0gZnJvbSAnQGNhcGFjaXRvci9jb3JlJztcbmV4cG9ydCBjbGFzcyBHZW9sb2NhdGlvbldlYiBleHRlbmRzIFdlYlBsdWdpbiB7XG4gICAgYXN5bmMgZ2V0Q3VycmVudFBvc2l0aW9uKG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgICAgIG5hdmlnYXRvci5nZW9sb2NhdGlvbi5nZXRDdXJyZW50UG9zaXRpb24ocG9zID0+IHtcbiAgICAgICAgICAgICAgICByZXNvbHZlKHBvcyk7XG4gICAgICAgICAgICB9LCBlcnIgPT4ge1xuICAgICAgICAgICAgICAgIHJlamVjdChlcnIpO1xuICAgICAgICAgICAgfSwgT2JqZWN0LmFzc2lnbih7IGVuYWJsZUhpZ2hBY2N1cmFjeTogZmFsc2UsIHRpbWVvdXQ6IDEwMDAwLCBtYXhpbXVtQWdlOiAwIH0sIG9wdGlvbnMpKTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGFzeW5jIHdhdGNoUG9zaXRpb24ob3B0aW9ucywgY2FsbGJhY2spIHtcbiAgICAgICAgY29uc3QgaWQgPSBuYXZpZ2F0b3IuZ2VvbG9jYXRpb24ud2F0Y2hQb3NpdGlvbihwb3MgPT4ge1xuICAgICAgICAgICAgY2FsbGJhY2socG9zKTtcbiAgICAgICAgfSwgZXJyID0+IHtcbiAgICAgICAgICAgIGNhbGxiYWNrKG51bGwsIGVycik7XG4gICAgICAgIH0sIE9iamVjdC5hc3NpZ24oeyBlbmFibGVIaWdoQWNjdXJhY3k6IGZhbHNlLCB0aW1lb3V0OiAxMDAwMCwgbWF4aW11bUFnZTogMCwgbWluaW11bVVwZGF0ZUludGVydmFsOiA1MDAwIH0sIG9wdGlvbnMpKTtcbiAgICAgICAgcmV0dXJuIGAke2lkfWA7XG4gICAgfVxuICAgIGFzeW5jIGNsZWFyV2F0Y2gob3B0aW9ucykge1xuICAgICAgICB3aW5kb3cubmF2aWdhdG9yLmdlb2xvY2F0aW9uLmNsZWFyV2F0Y2gocGFyc2VJbnQob3B0aW9ucy5pZCwgMTApKTtcbiAgICB9XG4gICAgYXN5bmMgY2hlY2tQZXJtaXNzaW9ucygpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBuYXZpZ2F0b3IgPT09ICd1bmRlZmluZWQnIHx8ICFuYXZpZ2F0b3IucGVybWlzc2lvbnMpIHtcbiAgICAgICAgICAgIHRocm93IHRoaXMudW5hdmFpbGFibGUoJ1Blcm1pc3Npb25zIEFQSSBub3QgYXZhaWxhYmxlIGluIHRoaXMgYnJvd3NlcicpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHBlcm1pc3Npb24gPSBhd2FpdCB3aW5kb3cubmF2aWdhdG9yLnBlcm1pc3Npb25zLnF1ZXJ5KHtcbiAgICAgICAgICAgIG5hbWU6ICdnZW9sb2NhdGlvbicsXG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4geyBsb2NhdGlvbjogcGVybWlzc2lvbi5zdGF0ZSwgY29hcnNlTG9jYXRpb246IHBlcm1pc3Npb24uc3RhdGUgfTtcbiAgICB9XG4gICAgYXN5bmMgcmVxdWVzdFBlcm1pc3Npb25zKCkge1xuICAgICAgICB0aHJvdyB0aGlzLnVuaW1wbGVtZW50ZWQoJ05vdCBpbXBsZW1lbnRlZCBvbiB3ZWIuJyk7XG4gICAgfVxufVxuY29uc3QgR2VvbG9jYXRpb24gPSBuZXcgR2VvbG9jYXRpb25XZWIoKTtcbmV4cG9ydCB7IEdlb2xvY2F0aW9uIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD13ZWIuanMubWFwIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFDTyxNQUFNLHVCQUF1QixVQUFVO0FBQUEsRUFDMUMsTUFBTSxtQkFBbUIsU0FBUztBQUM5QixXQUFPLElBQUksUUFBUSxDQUFDLFNBQVMsV0FBVztBQUNwQyxnQkFBVSxZQUFZLG1CQUFtQixTQUFPO0FBQzVDLGdCQUFRLEdBQUc7QUFBQSxNQUNkLEdBQUUsU0FBTztBQUNOLGVBQU8sR0FBRztBQUFBLE1BQ2IsR0FBRSxPQUFPLE9BQU8sRUFBRSxvQkFBb0IsT0FBTyxTQUFTLEtBQU8sWUFBWSxFQUFHLEdBQUUsT0FBTyxDQUFDO0FBQUEsSUFDbkcsQ0FBUztBQUFBLEVBQ1Q7QUFBQSxFQUNJLE1BQU0sY0FBYyxTQUFTLFVBQVU7QUFDbkMsVUFBTSxLQUFLLFVBQVUsWUFBWSxjQUFjLFNBQU87QUFDbEQsZUFBUyxHQUFHO0FBQUEsSUFDZixHQUFFLFNBQU87QUFDTixlQUFTLE1BQU0sR0FBRztBQUFBLElBQ3JCLEdBQUUsT0FBTyxPQUFPLEVBQUUsb0JBQW9CLE9BQU8sU0FBUyxLQUFPLFlBQVksR0FBRyx1QkFBdUIsSUFBTSxHQUFFLE9BQU8sQ0FBQztBQUNwSCxXQUFPLEdBQUcsRUFBRTtBQUFBLEVBQ3BCO0FBQUEsRUFDSSxNQUFNLFdBQVcsU0FBUztBQUN0QixXQUFPLFVBQVUsWUFBWSxXQUFXLFNBQVMsUUFBUSxJQUFJLEVBQUUsQ0FBQztBQUFBLEVBQ3hFO0FBQUEsRUFDSSxNQUFNLG1CQUFtQjtBQUNyQixRQUFJLE9BQU8sY0FBYyxlQUFlLENBQUMsVUFBVSxhQUFhO0FBQzVELFlBQU0sS0FBSyxZQUFZLCtDQUErQztBQUFBLElBQ2xGO0FBQ1EsVUFBTSxhQUFhLE1BQU0sT0FBTyxVQUFVLFlBQVksTUFBTTtBQUFBLE1BQ3hELE1BQU07QUFBQSxJQUNsQixDQUFTO0FBQ0QsV0FBTyxFQUFFLFVBQVUsV0FBVyxPQUFPLGdCQUFnQixXQUFXLE1BQU87QUFBQSxFQUMvRTtBQUFBLEVBQ0ksTUFBTSxxQkFBcUI7QUFDdkIsVUFBTSxLQUFLLGNBQWMseUJBQXlCO0FBQUEsRUFDMUQ7QUFDQTtBQUNLLE1BQUMsY0FBYyxJQUFJLGVBQWM7IiwieF9nb29nbGVfaWdub3JlTGlzdCI6WzBdfQ==
